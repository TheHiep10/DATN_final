// Generated by view binder compiler. Do not edit!
package com.example.afinal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.afinal.R;
import com.example.afinal.custom_textView.RobotoBlackTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdateMemberBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnAcceptupdate;

  @NonNull
  public final RobotoBlackTextView headerUpdateMember;

  @NonNull
  public final RadioButton namupdate;

  @NonNull
  public final RadioButton nuupdate;

  @NonNull
  public final RadioGroup radiogenderupdate;

  @NonNull
  public final EditText txtaddressupdate;

  @NonNull
  public final EditText txtdateupdate;

  @NonNull
  public final EditText txtnameupdate;

  @NonNull
  public final EditText txtnumberupdate;

  @NonNull
  public final EditText txttimeupdate;

  private UpdateMemberBinding(@NonNull LinearLayout rootView, @NonNull Button btnAcceptupdate,
      @NonNull RobotoBlackTextView headerUpdateMember, @NonNull RadioButton namupdate,
      @NonNull RadioButton nuupdate, @NonNull RadioGroup radiogenderupdate,
      @NonNull EditText txtaddressupdate, @NonNull EditText txtdateupdate,
      @NonNull EditText txtnameupdate, @NonNull EditText txtnumberupdate,
      @NonNull EditText txttimeupdate) {
    this.rootView = rootView;
    this.btnAcceptupdate = btnAcceptupdate;
    this.headerUpdateMember = headerUpdateMember;
    this.namupdate = namupdate;
    this.nuupdate = nuupdate;
    this.radiogenderupdate = radiogenderupdate;
    this.txtaddressupdate = txtaddressupdate;
    this.txtdateupdate = txtdateupdate;
    this.txtnameupdate = txtnameupdate;
    this.txtnumberupdate = txtnumberupdate;
    this.txttimeupdate = txttimeupdate;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdateMemberBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdateMemberBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_member, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdateMemberBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_acceptupdate;
      Button btnAcceptupdate = ViewBindings.findChildViewById(rootView, id);
      if (btnAcceptupdate == null) {
        break missingId;
      }

      id = R.id.header_update_member;
      RobotoBlackTextView headerUpdateMember = ViewBindings.findChildViewById(rootView, id);
      if (headerUpdateMember == null) {
        break missingId;
      }

      id = R.id.namupdate;
      RadioButton namupdate = ViewBindings.findChildViewById(rootView, id);
      if (namupdate == null) {
        break missingId;
      }

      id = R.id.nuupdate;
      RadioButton nuupdate = ViewBindings.findChildViewById(rootView, id);
      if (nuupdate == null) {
        break missingId;
      }

      id = R.id.radiogenderupdate;
      RadioGroup radiogenderupdate = ViewBindings.findChildViewById(rootView, id);
      if (radiogenderupdate == null) {
        break missingId;
      }

      id = R.id.txtaddressupdate;
      EditText txtaddressupdate = ViewBindings.findChildViewById(rootView, id);
      if (txtaddressupdate == null) {
        break missingId;
      }

      id = R.id.txtdateupdate;
      EditText txtdateupdate = ViewBindings.findChildViewById(rootView, id);
      if (txtdateupdate == null) {
        break missingId;
      }

      id = R.id.txtnameupdate;
      EditText txtnameupdate = ViewBindings.findChildViewById(rootView, id);
      if (txtnameupdate == null) {
        break missingId;
      }

      id = R.id.txtnumberupdate;
      EditText txtnumberupdate = ViewBindings.findChildViewById(rootView, id);
      if (txtnumberupdate == null) {
        break missingId;
      }

      id = R.id.txttimeupdate;
      EditText txttimeupdate = ViewBindings.findChildViewById(rootView, id);
      if (txttimeupdate == null) {
        break missingId;
      }

      return new UpdateMemberBinding((LinearLayout) rootView, btnAcceptupdate, headerUpdateMember,
          namupdate, nuupdate, radiogenderupdate, txtaddressupdate, txtdateupdate, txtnameupdate,
          txtnumberupdate, txttimeupdate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
